    private ImageView setVar(View defaultView, ArrayList<ImageView> group, int num, int index) {
        // setting variables for use in moveCells method...
        try {  // reassign variables to neighbouring cells (if border cell -> 1 or more assignment gives exception)
            defaultView = group.get(index+num);
        } catch (IndexOutOfBoundsException exception) {  // catch index error for border/edge cells
            Log.i(TAG, "moveCell: "+ exception);
        }
        return (ImageView)defaultView;
    }

    private void moveCell(View view, int gridIndex, int gridSize) {
        // check other cells in same row and column as clicked view are the empty cell, which means it should move

        ImageView imageView = (ImageView)view;
        int[] cellTag = (int[])imageView.getTag();
        //TODO: allow for different row/col sizes
        int cellRow = (int)Math.floor(gridIndex/(float)gridSize);
        int cellCol = gridIndex - cellRow*gridSize;
        Log.i(TAG, "cellCol: "+cellCol);

        ArrayList<ImageView> row = cellRows.get(cellRow);
        ArrayList<ImageView> col = cellCols.get(cellCol);
        for (View element : col) {
            int[] tag = (int[])element.getTag();
            Log.i(TAG, "col-before: "+tag[1]);
        }

        int cellRowIndex = row.indexOf(view);
        int cellColIndex = col.indexOf(view);

        //TODO: if cell is first or last in group then trying to get the next/prev index in list wont work

        // initialise vars as clicked view - assignment fails if the cell is first/last in group when we check the index
        // above/below (out of arrays bounds)...these vars pass through the following operations with no effect as
        // a view will only call this method when clicked if it isnt the empty cell
        ImageView prevInRow = setVar(view, row, -1, cellRowIndex);
        ImageView nextInRow = setVar(view, row, 1, cellRowIndex);
        ImageView prevInCol = setVar(view, col, -1, cellColIndex);
        ImageView nextInCol = setVar(view, col, 1, cellColIndex);

        // check neighbouring cells for empty image as indicated by tag - will be the (int) position of last cell in grid
        int lastCell = gridSize*gridSize - 1;
        ImageView[] cells = {prevInRow, prevInCol, nextInRow, nextInCol};
        for (ImageView element : cells) {
            int[] tag = (int[])element.getTag();
            if (tag[1] == lastCell) {  // found the empty cell
                //swap clicked cells image to this cell leaving it with nothing
                Drawable image = imageView.getDrawable();
                // set empty cells new image and tag
                element.setImageDrawable(image);
                tag[1] = cellTag[1];
                // set clicked cells new image and tag
                imageView.setImageDrawable(null);
                Log.i(TAG, "oldTag: "+cellTag[0]+","+cellTag[1]);
                cellTag[1] = lastCell;  // use the number here not the emptycell tag as we just changed it
                int[] tag2 = (int[])view.getTag();
                Log.i(TAG, "newTag: "+tag2[0]+","+tag2[1]);
                // update empty tracker
                emptyCellIndex = gridIndex;
                break;
            }
        }

        for (View element : col) {  // checking the swap was successful
            int[] tag = (int[])element.getTag();
            Log.i(TAG, "col-before: "+tag[1]);
        }

    }