// A slightly modified and more efficient way of determining the amount of inversions in a grid.
// Takes approx half the number of loops that the simple (used) method does, checking all pairs which is n(n+1)/2 loops

int inversions = 0;
int test = 0;
// loop through all grid cells, for 1st half of grid check pairs of current cell and previous ones. Can then determine
// amount of cell inversions based on how many lower values were found and subtracting that from the max possible
// inversions for that cell, as the remaining inversions will
for (int index=0; index<gridSize-1; index++) {
    int currentNum = randomisedGrid.get(index);

    // create variables for the current index to keep a track of each pair as we can stop searching if:
    // found all the possible pairs of A>B (all possible inversions found) or A<B (all non inversions found)
    // maxInversions = currentNum, maxNonInversions = gridSize - 1 - currentNum;
    // TODO: tracking will only save loops if num invs/non is less than number of loops (checks) left
    // for 1st half: (inv/non inv) < index  |  for 2nd half: (invs/non invs) <  gridSize - 1 - index - 1

    if (index <= gridSize/2) {  // if we are in 1st half of list (rounds down, ie 19/2 = 8.5 -> 8)
        // initialise invs/non to their max values and decrement them as we check through prev values
        int remainingInvs = currentNum;
        int remainingNonInvs = gridSize - 1 - currentNum;
        for (int i = index - 1; i >= 0; i--) {  // find all pairs with lower index than current cell
            test += 1;
            int pairNum = randomisedGrid.get(i);  // get the next highest index cell
            // decrement possible inversions if paired cell value is less than current cell value
            if (currentNum > pairNum) {
                remainingInvs -= 1;
            } else {  // decrement non inversion if paired cell value is greater than current cell value
                remainingNonInvs -= 1;
            }
            if (remainingInvs == 0) {  // found all possible inversions for current num, break inner loop
                break;  // this will mean nothing is added to inversions after for loop
            }
            if (remainingNonInvs == 0) {  // found all non inversions, thus all remaining pairs are inversions
                remainingInvs -= i;  // remove the appropriate amount from remaining inversions
                break;
            }
        }
        // inner loop has determined the remaining inversions, so now increment inversion count appropriately
        inversions += remainingInvs;
    } else {  // in 2nd half of list
        // initialise trackers to 0 and increment them as we check pairs
        int currentInvs = 0;
        int currentNonInvs = 0;
        for (int x = index + 1; x < gridSize; x++) {  // find all pairs with higher index than current selected cell
            test += 1;
            int pairNum = randomisedGrid.get(x);  // get the next highest index cell
            if (currentNum > pairNum) {  // add inversion if paired cell value is less than current cell value
                inversions += 1;
                currentInvs += 1;
            } else {  // add non inversion if paired cell value is greater than current cell value
                currentNonInvs += 1;
            }
            if (currentInvs == currentNum) {  // found all possible inversions for current num, break inner loop
                break;
            }
            if (currentNonInvs == (gridSize - 1 - currentNum)) {  // all of the remaining pairs are inversions
                inversions += gridSize - 1 - x;  // add the appropriate amount of remaining inversions
                break;
            }
        }
    }
}

//TODO: alternate method to count inversions, faster or slower? above is n(n-1)/2 for n size grid (sum nat nums)

//            // index of the current value being tested in the ordered values = how many lesser values have a greater
//            // index than it and therefore how many inversions there are for this value - if we remove tested values
//            // as we go, the order remains but possible inversions are removed
//            int inversions = 0;
//            for (int index=0; index<gridSize-1; index++) {  // test all grid cells for pairs with higher index cells
//                int currentNum = randomisedGrid.get(index);  // O(1) to access in array
//                int numInvs = unTestedValues.indexOf(currentNum);  // O(logn) to find value in sorted array
//                inversions += numInvs;
//                // remove current num before next loop, use its index so no search is needed
//                unTestedValues.remove(numInvs);  // O(n) to remove item at current index in sorted array
//            }
//            unTestedValues.remove(0);  // remove the last remaining value as we dont loop anymore
